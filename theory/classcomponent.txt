life cycle methods of class component
-------------------------------------

render() method is required and will always be called, the others are optional and will be called if you define them.  

1: Mounting:

	constructor() :
		The constructor method is called before anything else, when the component is initated, and it is the natural place to set up the initial state and other initialvalues.

	class Header extends React.Component {
		constructor(props) {
			super(props);
			this.state = { favoritecolor: "red" };
		}
	}
	render() {
		return {
			<h1>My favorite color is {this.state.favoritecolor} </h1>
		}
	}
	RenderDOM.render(<Header />, document.getElementById('root'));


	getDerivedStateFromProps() :
		The getDerivedStateFromProps() method is called right before rendering the elements in the DOM.


		class Header extends React.Component {
			constructor(props) {
				super(props);
				this.state = { favoritecolor: "red" }
			}
			static getDerivedStateFromProps(props, state) {
				return { favoritecolor: props.favcol };
			}
			render() {
				return {
					<h1>My favorite color is {this.state.favoritecolor} </h1>
				}
			}
		}
		RenderDOM.render(<Header />, document.getElementById('root'));

	render()
	componentDidMount() :
		The componentDidMount() method is called after the component is rendered.

		class Header extends React.Component {
		constructor(props) {
			super(props);
			this.state = {favoritecolor: "red"};
		}
		componentDidMount() {
			setTimeout(() => {
			this.setState({favoritecolor: "yellow"})
			}, 1000)
		}
		render() {
			return (
			<h1>My Favorite Color is {this.state.favoritecolor}</h1>
			);
		}
		}

		ReactDOM.render(<Header />, document.getElementById('root'));


2: Updating 
	A component is updated whenever there is a change in the component's state or props.

	getDerivedStateFromProps() :
	 Also at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated.

	 class Header extends React.Component {
		constructor(props) {
			super(props);
			this.state = {favoritecolor: "red"};
		}
		static getDerivedStateFromProps(props, state) {
			return {favoritecolor: props.favcol };
		}
		changeColor = () => {
			this.setState({favoritecolor: "blue"});
		}
		render() {
			return (
			<div>
			<h1>My Favorite Color is {this.state.favoritecolor}</h1>
			<button type="button" onClick={this.changeColor}>Change color</button>
			</div>
			);
		}
		}

	shouldComponentUpdate() :
	In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not.
	The default value is true.

	class Header extends React.Component {
		constructor(props) {
			super(props);
			this.state = {favoritecolor: "red"};
		}
		shouldComponentUpdate() {
			return false;
		}
		changeColor = () => {
			this.setState({favoritecolor: "blue"});
		}
		render() {
			return (
			<div>
			<h1>My Favorite Color is {this.state.favoritecolor}</h1>
			<button type="button" onClick={this.changeColor}>Change color</button>
			</div>
			);
		}
		}

	getSnapshotBeforeUpdate(): 
	In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.


	class Header extends React.Component {
		constructor(props) {
			super(props);
			this.state = {favoritecolor: "red"};
		}
		componentDidMount() {
			setTimeout(() => {
			this.setState({favoritecolor: "yellow"})
			}, 1000)
		}
		getSnapshotBeforeUpdate(prevProps, prevState) {
			document.getElementById("div1").innerHTML =
			"Before the update, the favorite was " + prevState.favoritecolor;
		}
		componentDidUpdate() {
			document.getElementById("div2").innerHTML =
			"The updated favorite is " + this.state.favoritecolor;
		}
		render() {
			return (
			<div>
				<h1>My Favorite Color is {this.state.favoritecolor}</h1>
				<div id="div1"></div>
				<div id="div2"></div>
			</div>
			);
		}
		}

	componentDidUpdate() :
	The componentDidUpdate method is called after the component is updated in the DOM.


	class Header extends React.Component {
	constructor(props) {
		super(props);
		this.state = {favoritecolor: "red"};
	}
	componentDidMount() {
		setTimeout(() => {
		this.setState({favoritecolor: "yellow"})
		}, 1000)
	}
	componentDidUpdate() {
		document.getElementById("mydiv").innerHTML =
		"The updated favorite is " + this.state.favoritecolor;
	}
	render() {
		return (
		<div>
		<h1>My Favorite Color is {this.state.favoritecolor}</h1>
		<div id="mydiv"></div>
		</div>
		);
	}
	}


3.Unmounting

	componentWillUnmount() :
	The componentWillUnmount method is called when the component is about to be removed from the DOM.

	class Container extends React.Component {
	constructor(props) {
		super(props);
		this.state = {show: true};
	}
	delHeader = () => {
		this.setState({show: false});
	}
	render() {
		let myheader;
		if (this.state.show) {
		myheader = <Child />;
		};
		return (
		<div>
		{myheader}
		<button type="button" onClick={this.delHeader}>Delete Header</button>
		</div>
		);
	}
	}

	class Child extends React.Component {
	componentWillUnmount() {
		alert("The component named Header is about to be unmounted.");
	}
	render() {
		return (
		<h1>Hello World!</h1>
		);
	}
	}